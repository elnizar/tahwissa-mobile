package tn.esprit.tahwissa;

import com.codename1.components.ImageViewer;
import com.codename1.components.InfiniteProgress;
import com.codename1.components.InteractionDialog;
import com.codename1.components.SpanLabel;
import com.codename1.components.ToastBar;
import com.codename1.components.WebBrowser;
import com.codename1.io.ConnectionRequest;
import com.codename1.io.FileSystemStorage;
import com.codename1.io.MultipartRequest;
import com.codename1.io.NetworkManager;
import com.codename1.social.FacebookConnect;
import com.codename1.ui.Button;
import com.codename1.ui.Container;
import com.codename1.ui.Display;
import com.codename1.ui.Form;
import com.codename1.ui.Dialog;
import com.codename1.ui.EncodedImage;
import com.codename1.ui.FontImage;
import com.codename1.ui.Image;
import com.codename1.ui.Label;
import com.codename1.ui.TextField;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;
import com.codename1.ui.Toolbar;
import com.codename1.ui.URLImage;
import com.codename1.ui.geom.Dimension;
import com.codename1.ui.layouts.BorderLayout;
import com.codename1.ui.layouts.BoxLayout;
import com.codename1.ui.layouts.FlowLayout;
import com.codename1.ui.list.DefaultListModel;
import com.codename1.ui.list.ListModel;
import com.codename1.ui.table.TableLayout;
import com.codename1.ui.util.UIBuilder;
import entity.Creneau;
import entity.Evenement;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.Observable;
import java.util.Observer;
import java.util.Timer;
import java.util.TimerTask;
import service.EventService;
import util.FacebookLogin;
import util.MenuManager;

/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename
 * One</a> for the purpose of building native mobile applications using Java.
 */
public class DetailsEvent implements Observer {

    private boolean aParticipe = true;
    private Form current;
    private Resources theme;
    public static Evenement e = new Evenement();
    private ToastBar.Status status;

    public void init(Object context) {
        theme = UIManager.initFirstTheme("/theme");

        // Enable Toolbar on all Forms by default
        Toolbar.setGlobalToolbar(true);

        // Pro only feature, uncomment if you have a pro subscription
        // Log.bindCrashProtection(true);
    }
    Form f;
    private List<entity.Image> images = new ArrayList<>();
    private Container container;
    private String baseUrl;

    private void initImages() {
        UIBuilder uibuilder = new UIBuilder();
        ImageViewer imgV = (ImageViewer) uibuilder.findByName("imageviewer", container);
        if (images.size() == 1) {
            EncodedImage placeholder = EncodedImage.createFromImage(Image.createImage(Display.getInstance().getDisplayWidth(), 150), true);
            String path = images.get(0).getChemin();
            Image image;
            if (path.indexOf("filestack") == -1) {
                image = URLImage.createToStorage(placeholder, images.get(0).getChemin()+"123", "http://localhost/tahwissa/web/images/evenements/" + images.get(0).getChemin());
            } else {
                image = URLImage.createToStorage(placeholder, images.get(0).getChemin().substring(path.lastIndexOf("/") + 1), images.get(0).getChemin());
            }
            imgV.setImage(image);
            System.out.println("http://localhost/tahwissa/web/images/evenements/" + images.get(0).getChemin());
            f.refreshTheme();
            return;
        }

        ListModel<Image> imagesList = new DefaultListModel<>();
        for (int i = 0; i < images.size(); i++) {

            EncodedImage placeholder = EncodedImage.createFromImage(Image.createImage(Display.getInstance().getDisplayWidth(), 150), false);
            String path = images.get(i).getChemin();
            Image image;
            if (path.indexOf("filestack") == -1) {
                image = URLImage.createToStorage(placeholder, images.get(i).getChemin(), "http://localhost/tahwissa/web/images/evenements/" + images.get(i).getChemin());
            } else {
                System.out.println(path);
                image = URLImage.createToStorage(placeholder, images.get(i).getChemin().substring(path.lastIndexOf("/") + 1), images.get(i).getChemin());
            }
            //imgV.setImage(image);
            //System.out.println("http://localhost/tahwissa/web/images/evenements/" + images.get(i).getChemin());
            imagesList.addItem(image);
        }
        imgV.setPreferredSize(new Dimension(Display.getInstance().getDisplayWidth(), 150));
        imgV.setImageList(imagesList);
        imgV.getImageList().setSelectedIndex(0);
        f.refreshTheme();
    }

    public void initInfos() {
        UIBuilder uibuilder = new UIBuilder();
        Label prix = (Label) uibuilder.findByName("prix", container);
        Label places = (Label) uibuilder.findByName("places", container);
        Label date = (Label) uibuilder.findByName("date", container);
        prix.setText(String.valueOf(e.getFrais()));
        places.setText((e.getNombrePlaces() - e.getNombrePlacesPrises()) + "");
        date.setText(e.getDateHeureDepart());

        SpanLabel description = (SpanLabel) uibuilder.findByName("description", container);
        description.setText(e.getDescription());
        SpanLabel reglement = (SpanLabel) uibuilder.findByName("reglement", container);
        reglement.setText(e.getReglement());

        Label titre = (Label) uibuilder.findByName("titre", container);
        Label distance = (Label) uibuilder.findByName("distance", container);
        Label duree = (Label) uibuilder.findByName("duree", container);
        Container c = (Container) uibuilder.findByName("test", container);
        if (e.getEvenementType().equals("camping")) {
            titre.setIcon(theme.getImage("camp.png"));
            titre.setText("Camping");
            c.removeComponent(distance);
            duree.setText(String.valueOf(e.getDuree()));
        } else {
            titre.setText("RandonnÃ©e");
            titre.setIcon(theme.getImage("rando.png"));
            c.removeComponent(duree);
            distance.setText(String.valueOf(e.getDistanceParcourue()));
        }
        f.refreshTheme();
        Label dest = (Label) uibuilder.findByName("destination", container);
        dest.setText(e.getDestination());

    }
    InteractionDialog d;
    UIBuilder uibuilder;

    public void showPlanning() {
        EventService service = new EventService();
        service.getPlanning(e, this);
    }

    public void initButtons() {
        UIBuilder uibuilder = new UIBuilder();
        Button participerButton = (Button) uibuilder.findByName("participer", container);
        Container buttons = (Container) uibuilder.findByName("buttons", container);
        Button modifierButton = (Button) uibuilder.findByName("modifier", container);
        Button supprimerButton = (Button) uibuilder.findByName("supprimer", container);
        Label shareButton = (Label) uibuilder.findByName("partager", container);
        Button planningButton = (Button) uibuilder.findByName("planning", container);
        planningButton.addActionListener((evt) -> {
            showPlanning();
        });
        shareButton.addPointerPressedListener((evt) -> {
            FacebookLogin.login(f, this);
        });
        Label twitterShare = (Label) uibuilder.findByName("twitter", container);
        twitterShare.addPointerPressedListener((evt) -> {
            shareTwitter();
        });
        // System.out.println(e.getUserMail() + " vs " + LoginManager.getUser().getEmail());
        if (LoginManager.getUser().getId().equals(e.getOrganisateur_id()) == false) {
            buttons.removeComponent(modifierButton);
            buttons.removeComponent(supprimerButton);
            participerButton.addActionListener((evt) -> {
                if (e.getNombrePlaces() - e.getNombrePlacesPrises() == 0) {
                    ToastBar.showErrorMessage("Evenement complet");
                    return;
                }
                d = new InteractionDialog("Paiement");
                // d.setSize(new Dimension(Display.getInstance().getDisplayWidth(),Display.getInstance().getDisplayHeight()/2));
                d.setUIID("myDialog");
                d.setLayout(BoxLayout.y());
                Label l = new Label("Passcode");
                TextField passcode = new TextField();
                Button valider = new Button("Valider");
                valider.addActionListener((ev) -> {
                    status = ToastBar.getInstance().createStatus();

                    status.setMessage("Chargement");
                    status.setShowProgressIndicator(true);
                    status.setProgress(0);
                    status.show();
                    EventService service = new EventService();
                    service.participer(e, LoginManager.getUser(), passcode.getText(), this);
                    for (int i = 0; i < 100; i++) {
                        status.setProgress(i);
                    }
                });
                Container paypalLayout = new Container(BoxLayout.x());
                //Button paypal = new Button("");
                Label paypal = new Label("");
                paypal.setIcon(theme.getImage("paypal.png"));
                paypal.setUIID("paypalButton");
                paypal.setTextPosition(Label.LEFT);
                System.out.println(theme.getImage("paypal.png"));
                paypal.setFocusable(true);
                // paypal.setUIID("paypalButton");
                //Label paypalLabel = new Label("Ou ");
                // paypalLayout.add(paypalLabel);
                paypalLayout.add(paypal);
                Button fermer = new Button("Fermer");
                fermer.addActionListener((ev) -> {
                    d.dispose();
                });
                paypal.addPointerPressedListener((event) -> {
                    Form payForm = new Form("Paiement", new BorderLayout());
                    payForm.setTitle("Paypal checkout");
                    payForm.getToolbar().setUIID("myToolbar");
                    payForm.getToolbar().addCommandToLeftBar("", theme.getImage("previous.png"), (eventt) -> {
                        f.showBack();
                    });
                    WebBrowser webBrowser = new WebBrowser("http://localhost/paypalsdk/sample/payments/CreatePaymentUsingPaypal.php?amount=" + e.getFrais());
                    //Command backCommand = new Command("Annuler", null, 0);
                    
                    webBrowser.setBrowserNavigationCallback((url) -> {
                        if (url.indexOf("success=true") != -1) {
                            ToastBar.showMessage("Paiement effectuÃ©", FontImage.MATERIAL_CHECK);
                            status = ToastBar.getInstance().createStatus();

                            status.setMessage("Chargement");
                            status.setShowProgressIndicator(true);
                            status.setProgress(0);
                            status.show();
                            EventService service = new EventService();
                            service.participerPaypal(e, LoginManager.getUser(), this);
                            for (int i = 0; i < 100; i++) {
                                status.setProgress(i);
                            }
                            f.showBack();

                        } else if (url.indexOf("success=false") != -1) {
                            ToastBar.showMessage("Paiement Ã©chouÃ©", FontImage.MATERIAL_CHECK);
                            f.showBack();
                        }
                        System.out.println(url);
                        return true;
                    });
                    payForm.add(BorderLayout.CENTER, webBrowser);
                    payForm.show();
                });
                d.add(l);
                d.add(passcode);
                d.add(valider);
                d.add(paypalLayout);
                d.add(fermer);
                valider.setUIID("buttonPrimary");
                fermer.setUIID("buttonPrimary");
                d.show(0, 0, 0, 0);
            });
            f.refreshTheme();
            return;
        }
        buttons.removeComponent(participerButton);
        modifierButton.addActionListener((evt) -> {
            if (e.getStatut().equals("AcceptÃ©")) {
                ToastBar.showErrorMessage("Vous ne pouvez pas modifier cet evenement");
                return;
            }
            Modifier m = new Modifier();
            Modifier.evenement = DetailsEvent.e;
            m.init(current);
            m.start();
        });
        supprimerButton.addActionListener((evt) -> {
            if (e.getStatut().equals("AcceptÃ©")) {
                ToastBar.showErrorMessage("Vous ne pouvez pas supprimer cet evenement");
                return;
            }

            status = ToastBar.getInstance().createStatus();

            status.setMessage("Suppression");
            status.setShowProgressIndicator(true);
            status.setProgress(0);
            status.show();
            EventService service = new EventService();
            service.removeEvent(e, this);
            for (int i = 0; i < 100; i++) {
                status.setProgress(i);
            }

        });

    }

    public void start() {
        // System.out.println(e.getId());
        System.out.println(e.getNombrePlaces() + " , taken : " + e.getNombrePlacesPrises());
        uibuilder = new UIBuilder();
        UIBuilder.registerCustomComponent("ImageViewer", ImageViewer.class);
        UIBuilder.registerCustomComponent("SpanLabel", SpanLabel.class);
        container = uibuilder.createContainer(theme, "detailsEvent");
        f = container.getComponentForm();
        f.getToolbar().addCommandToOverflowMenu("Consulter les Ã©vÃ¨nements", null, (evt) -> {
            MyApplication m = new MyApplication();
            m.init(current);
            m.start();
        });
        f.getToolbar().addCommandToOverflowMenu("Organiser un evenement", null, (evt) -> {
            Organiser o = new Organiser();
            o.init(current);
            o.start();
        });
        f.getToolbar().addCommandToOverflowMenu("Mes Ã©venements", null, (evt) -> {
            MyEvents e = new MyEvents();
            e.init(current);
            e.start();
        });
        MenuManager.createMenu(f, theme);
        initInfos();
        initButtons();
        f.show();
        EventService t = new EventService();
        t.aParticipe(e, LoginManager.getUser(), this);
        InfiniteProgress ip = new InfiniteProgress();
        Dialog dlg = ip.showInifiniteBlocking();

        t.getEventImages(e.getId(), this, dlg);
    }

    public void stop() {
        current = Display.getInstance().getCurrent();
        if (current instanceof Dialog) {
            ((Dialog) current).dispose();
            current = Display.getInstance().getCurrent();
        }
    }

    public void destroy() {

    }

    @Override
    public void update(Observable o, Object arg) {
        if (arg instanceof List) {

            List list = (List) arg;
            //System.out.println(list.get(0));
            if (list.get(0) instanceof Creneau) {
                Form planningForm = new Form("Planning", BoxLayout.y());
                planningForm.getToolbar().setUIID("myToolbar");
                planningForm.setTitle("Planning");
                planningForm.getToolbar().addCommandToLeftBar("", theme.getImage("previous.png"), (evt) -> {
                    f.showBack();
                });

                // planningForm.add(BoxLayout.encloseY(new SpanLabel("DÃ©but"),
                // new SpanLabel("Fin"),
                // new SpanLabel("Description")));
                List<Creneau> planning = (List<Creneau>) list;
                for (int i = 0; i < planning.size(); i++) {
                    SpanLabel debut = new SpanLabel(planning.get(i).getDateDebut());
                    SpanLabel fin = new SpanLabel(planning.get(i).getDateFin());
                    SpanLabel desc = new SpanLabel(planning.get(i).getDescription());
                    debut.setIcon(theme.getImage("from.png"));
                    fin.setIcon(theme.getImage("to.png"));
                    Container dates = BoxLayout.encloseY(debut, fin);
                    dates.setUIID("planningRowFrom");
                    Container row = BoxLayout.encloseY(dates, FlowLayout.encloseCenter(desc));
                    row.setUIID("planningRow");
                    planningForm.add(row);
                    planningForm.add(FlowLayout.encloseCenter(new Label(theme.getImage("four-dots-horizontally-aligned-as-a-line.png"))));
                }

                planningForm.show();
                return;
            }

        }
        if (arg instanceof Boolean) {
            Boolean b = (Boolean) arg;
            if (b.equals(true)) {
                Button participerButton = (Button) uibuilder.findByName("participer", container);
                participerButton.setEnabled(false);
                f.refreshTheme();
                System.out.println("disabled button");
            }
        } else if ((o == null) && (arg == null)) {
            share();
        } else if (arg instanceof List) {
            // System.out.println("notified");
            //EventService t = (EventService) o;
            images = (List<entity.Image>) arg;
            initImages();
        } else if (arg instanceof String) {
            String result = (String) arg;
            status.clear();
            if (result.equals("-1")) {
                ToastBar.showErrorMessage("Vous avez dÃ©ja participÃ© a cet Ã©vÃ¨nement, opÃ©ration annulÃ©e");
                d.dispose();
                return;
            }
            if (result.equals("-2")) {
                ToastBar.showErrorMessage("Passcode invalide");

                return;
            }
            if (result.equals("0")) {
                ToastBar.showErrorMessage("Solde insuffisant");
                return;
            } else {
                Button participerButton = (Button) uibuilder.findByName("participer", container);
                participerButton.setEnabled(false);
                Label places = (Label) uibuilder.findByName("places", container);
                e.setNombrePlacesPrises(e.getNombrePlacesPrises() + 1);
                places.setText(String.valueOf(e.getNombrePlaces() - e.getNombrePlacesPrises()));
                ToastBar.showMessage("Participation effectuÃ©e avec succÃ¨s", FontImage.MATERIAL_CHECK);
                f.refreshTheme();
                d.dispose();

            }

        } else {
            status.clear();
            ToastBar.showMessage("Evenement supprimÃ©", FontImage.MATERIAL_CHECK);
            MyEvents m = new MyEvents();
            m.init(current);
            m.start();
        }

    }

    public void share() {
        System.out.println("Sharing with token " + FacebookLogin.TOKEN);
        MultipartRequest req = new MultipartRequest();
        String endpoint;
        if (FacebookConnect.getInstance().isFacebookSDKSupported()) {
            endpoint = "https://graph.facebook.com/me/photos?access_token=" + FacebookConnect.getInstance().getAccessToken();
        } else {
            // Login.login(f);

            endpoint = "https://graph.facebook.com/me/photos?access_token=" + FacebookLogin.TOKEN;

        }
        req.setUrl(endpoint);
        System.out.println(endpoint);
        if (e.getEvenementType().equals("camping")) {
            // req.addArgument();
            req.addArgumentNoEncoding("message", "Ne ratez pas ce fabuleux camping de " + e.getDuree() + " jours a " + e.getDestination() + "\n #tahwissa : Le premier rÃ©seau social pour les randonneurs, rejoignez-nous maintenant!");
        } else {
            req.addArgumentNoEncoding("message", "Ne ratez pas cette excellente randonnÃ©e a " + e.getDestination() + "\n #tahwissa : Le premier rÃ©seau social pour les randonneurs, rejoignez-nous maintenant!");

        }

        // req.addArgument("message", "test");
        InputStream is = null;
        try {
            String fileName = "";
            if (images.get(0).getChemin().indexOf("filestack") != -1) {
                fileName = images.get(0).getChemin().substring(
                        images.get(0).getChemin().lastIndexOf("/") + 1);
            } else {
                fileName = images.get(0).getChemin()+"123";
            }
            System.out.println(fileName);
            is = FileSystemStorage.getInstance().openInputStream("file://home/" + fileName);
            //System.out.println(is);
            req.addData("source", is, FileSystemStorage.getInstance().getLength("file://home/" + fileName), "image/jpeg");
            NetworkManager.getInstance().addToQueue(req);
            req.addResponseListener((evt) -> {
                ToastBar.showMessage("Evenement partagÃ© sur Facebook !  ", FontImage.MATERIAL_CHECK);
            });

        } catch (IOException ioe) {
            ioe.printStackTrace();
        }
    }

    public void shareTwitter() {
        Form next = new Form(new BorderLayout());
        next.setTitle("Twitter login");
        next.getToolbar().setUIID("myToolbar");
        next.getToolbar().addCommandToLeftBar("", theme.getImage("previous.png"), (evt) -> {
            f.showBack();
        });
        WebBrowser browser = new WebBrowser();
        System.out.println("id:" + e.getId());

        browser.setURL("http://localhost/twitter/index.php?id=" + e.getId());

        browser.setBrowserNavigationCallback((url) -> {
            if (url.indexOf("denied") != -1) {
                ToastBar.showErrorMessage("OpÃ©aration annulÃ©e");
            } else if (url.indexOf("authSuccessful.php?oauth_token") != -1) {
                new Timer().schedule(new TimerTask() {
                    @Override
                    public void run() {
                        ToastBar.showMessage("PartagÃ© sur twitter", FontImage.MATERIAL_CHECK);
                        f.showBack();
                    }
                }, 2000);
                System.out.println(url);
            }
            return true;
        });
        next.add(BorderLayout.NORTH, browser);
        next.show();
    }
}
